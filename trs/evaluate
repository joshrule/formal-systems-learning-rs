# I'd like to write this as
#
# "Mx" = "Mxx"
# UU = e
# III = U
# I" = IU"
#
# but dealing with associativity and empty strings makes this way too complex
# given our time constraints. So, I'm punting and representing strings as
# right-branching trees (e.g. cons-cell lists). This is a bit awkward since we
# have to make some assumptions about what primitives to provide, but it removes
# the need for associativity or empty strings.

# "Mx" = "Mxx"
S((M x_)) = S(CAT((M x_) x_));

# UU = e
(U (U x_)) = x_;

# III = U
(I (I (I x_))) = (U x_);

# I" = IU"
(I END) = (I (U END));
